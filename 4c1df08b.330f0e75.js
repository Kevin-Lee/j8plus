(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{64:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),i=(t(0),t(80)),l={id:"funs",title:"Funs (Functions)",sidebar_label:"Funs (Functions)"},c={unversionedId:"functions/funs",id:"functions/funs",isDocsHomePage:!1,title:"Funs (Functions)",description:"Have lots of fun with Funs!",source:"@site/docs/functions/funs.md",slug:"/functions/funs",permalink:"/docs/functions/funs",version:"current",sidebar_label:"Funs (Functions)",sidebar:"j8PlusSidebar",previous:{title:"J8+ - Getting Started",permalink:"/docs/"},next:{title:"ArrayFuns",permalink:"/docs/functions/array-funs"}},o=[{value:"<code>isNull()</code>",id:"isnull",children:[]},{value:"<code>isNotNull()</code>",id:"isnotnull",children:[]},{value:"<code>reversed()</code>",id:"reversed",children:[{value:"Examples",id:"examples",children:[]}]},{value:"<code>toStringOf</code>",id:"tostringof",children:[]},{value:"<code>satisfying</code>",id:"satisfying",children:[]},{value:"<code>applying</code>",id:"applying",children:[]}],s={rightToc:o};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Have lots of fun with Funs!")),Object(i.b)("p",null,"Funs class contains methods that can be used with other functions or Stream API (or other Monads)."),Object(i.b)("p",null,"To use it, just do static import of ",Object(i.b)("inlineCode",{parentName:"p"},"j8plus.Funs"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"import static j8plus.Funs.*;\n")),Object(i.b)("h2",{id:"isnull"},Object(i.b)("inlineCode",{parentName:"h2"},"isNull()")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"isNull()")," method returns a ",Object(i.b)("inlineCode",{parentName:"p"},"Predicate")," which checks if the given parameter is ",Object(i.b)("inlineCode",{parentName:"p"},"null"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'System.out.println(isNull().test(null));    // true\nSystem.out.println(isNull().test(1));       // false\nSystem.out.println(isNull().test("abc"));   // false\n')),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"It can be useful when using Stream.")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'final List<String> listOfNull =\n    Arrays.asList("a", "b", null, "c", null, null, "d")\n        .stream()\n        .filter(isNull())\n        .collect(toList());\n\nSystem.out.println("null found: " + listOfNull.size());\n')),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Result:")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"null found:3\n")),Object(i.b)("h2",{id:"isnotnull"},Object(i.b)("inlineCode",{parentName:"h2"},"isNotNull()")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"isNotNull()")," method returns a ",Object(i.b)("inlineCode",{parentName:"p"},"Predicate")," which checks if the given parameter is not ",Object(i.b)("inlineCode",{parentName:"p"},"null"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'System.out.println(isNotNull().test(null));   // false\nSystem.out.println(isNotNull().test(1));      // true\nSystem.out.println(isNotNull().test("abc"));  // true\n')),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"It can be useful when using Stream.")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'final List<String> listOfNotNullString =\n    Arrays.asList("a", "b", null, "c", null, null, "d")\n        .stream()\n        .filter(isNotNull())\n        .collect(toList());\n\nSystem.out.println("list of not null String values: " + listOfNotNullString);\n')),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Result:")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"[a,b,c,d]\n")),Object(i.b)("h2",{id:"reversed"},Object(i.b)("inlineCode",{parentName:"h2"},"reversed()")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"reversed()")," returns a ",Object(i.b)("inlineCode",{parentName:"p"},"Comparator")," which imposes the reversed order of the given Comparator."),Object(i.b)("h3",{id:"examples"},"Examples"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"With this simple JavaBean")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"public static class Product {\n  private Long id;\n  private String name;\n  private BigDecimal price;\n  \n  // getters and setters\n  \n  public Product price(final BigDecimal price) {\n    setPrice(price);\n    return this;\n  }\n\n  // remainder omitted...\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'final List<Integer> numbers = Arrays.asList(4, 2, 5, 3, 1);\n\nfinal Comparator<Integer> intCmp = Integer::compareTo;\nfinal Comparator<Integer> reversedIntCmp = reversed(intCmp);\n\nfinal List<Integer> numbersInAsc =\n  numbers.stream()\n    .sorted(intCmp)\n    .collect(toList());\nSystem.out.println("Number in ascending order: " + numbersInAsc);\n// Number in ascending order: [1, 2, 3, 4, 5]\n\nfinal List<Integer> numbersInDsc =\n  numbers.stream()\n    .sorted(reversedIntCmp)\n    .collect(toList());\nSystem.out.println("Number in descending order: " + numbersInDsc);\n// Number in descending order: [5, 4, 3, 2, 1]\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'final List<Product> products =\n  Arrays.asList(product(1L, "A", new BigDecimal("30.00")),\n                product(2L, "B", new BigDecimal("12.50")),\n                product(3L, "C", new BigDecimal("5.45")));\nfinal List<Product> productsSortedByPriceInAsc =\n  products\n    .stream()\n    .sorted(comparing(Product::getPrice))\n    .collect(toList());\nSystem.out.println(\n  "Products sorted by price in ascending order: \\n" + productsSortedByPriceInAsc\n);\n// Products sorted by price in ascending order: \n// [\n//   Product{id=3, name=\'C\', price=5.45},\n//   Product{id=2, name=\'B\', price=12.50},\n//   Product{id=1, name=\'A\', price=30.00}\n// ]\n\nfinal List<Product> productsSortedByPriceInDsc =\n  products\n    .stream()\n    .sorted(reversed(comparing(Product::getPrice)))\n    .collect(toList());\nSystem.out.println(\n  "Products sorted by price in descending order: \\n" + productsSortedByPriceInDsc\n);\n// Products sorted by price in descending order: \n// [\n//   Product{id=1, name=\'A\', price=30.00},\n//   Product{id=2, name=\'B\', price=12.50},\n//   Product{id=3, name=\'C\', price=5.45}\n// ]\n')),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},".sorted(BigDecimal::compareTo.reversed())")," // This results in compile-time error but, the following one doesn't.")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'final List<BigDecimal> bigDecimalsInDsc =\n    Arrays.asList(new BigDecimal("3"), new BigDecimal("1"), new BigDecimal("2"))\n        .stream()\n        .sorted(reversed(BigDecimal::compareTo))\n        .collect(toList());\nSystem.out.println("bigDecimalsInDsc: " + bigDecimalsInDsc);\n// bigDecimalsInDsc: [3, 2, 1]\n')),Object(i.b)("h2",{id:"tostringof"},Object(i.b)("inlineCode",{parentName:"h2"},"toStringOf")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"toStringOf")," returns a ",Object(i.b)("inlineCode",{parentName:"li"},"Function")," which returns String. ",Object(i.b)("inlineCode",{parentName:"li"},"toStringOf")," takes a ",Object(i.b)("inlineCode",{parentName:"li"},"Function")," as a parameter then combines that with ",Object(i.b)("inlineCode",{parentName:"li"},"String::valueOf"),". So it will eventually work like")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Parameter function: f\nString.valueOf(f.apply(x))\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Exmaples")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'System.out.println(\n    products.stream()\n            .map(Product::getPrice)\n            .collect(joining(", ")) // compile-time error because BigDecimal is not String.\n);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'System.out.println(\n    products.stream()\n            .map(toStringOf(Product::getPrice))\n            .collect(joining(", "))\n);\n// 30.00, 12.50, 5.45\n')),Object(i.b)("h2",{id:"satisfying"},Object(i.b)("inlineCode",{parentName:"h2"},"satisfying")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"satisfying")," takes ",Object(i.b)("inlineCode",{parentName:"p"},"BiPredicate<O, T>")," and an additional parameter of type ",Object(i.b)("inlineCode",{parentName:"p"},"T")," then returns a ",Object(i.b)("inlineCode",{parentName:"p"},"Predicate<O>"),". This is meant to be used with method references to simplifying filtering. It would be much clear with some examples."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Examples")),Object(i.b)("p",null,"Where there is a list of String and you want to filter in all String values start with a certain word. If you do it like this using lambda expressions."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'System.out.println(\n  Arrays.asList("Hello world", "Hello Kevin", "Hi world", "Hey", "Hello")\n        .stream()\n        .filter(s -> s.startsWith("Hello"))\n        .collect(toList())\n);\n// [Hello world, Hello Kevin, Hello]\n')),Object(i.b)("p",null,"Because ",Object(i.b)("inlineCode",{parentName:"p"},"startWith()")," method takes a parameter, you can't use method reference."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'.filter(String::startsWith("Hello")) // You cannot pass parameters to a method reference.\n')),Object(i.b)("p",null,"However, if you use ",Object(i.b)("inlineCode",{parentName:"p"},"satisfying()")," method, you can. Just like this."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'System.out.println(\n  Arrays.asList("Hello world", "Hello Kevin", "Hi world", "Hey", "Hello")\n        .stream()\n        .filter(satisfying(String::startsWith, "Hello"))\n        .collect(toList())\n);\n// [Hello world, Hello Kevin, Hello]\n')),Object(i.b)("h2",{id:"applying"},Object(i.b)("inlineCode",{parentName:"h2"},"applying")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'final List<Product> products = Arrays.asList(\n    product(1L, "A", $("30.00")),\n    product(2L, "B", $("12.50")),\n    product(3L, "C", $("5.45"))\n  );\n\nfinal BigDecimal specialPrice = new BigDecimal("10.00");\nSystem.out.println(\n    products\n        .stream()\n        .map(applying(Product::price, specialPrice))\n        .collect(toList())\n);\n// [\n//   Product{id=1, name=\'A\', price=10.00},\n//   Product{id=2, name=\'B\', price=10.00},\n//   Product{id=3, name=\'C\', price=10.00}\n// ]\n')))}u.isMDXComponent=!0},80:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),u=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=u(t),d=r,m=p["".concat(l,".").concat(d)]||p[d]||b[d]||i;return t?a.a.createElement(m,c(c({ref:n},s),{},{components:t})):a.a.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var s=2;s<i;s++)l[s]=t[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);