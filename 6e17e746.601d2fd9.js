(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{68:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return r})),a.d(n,"metadata",(function(){return o})),a.d(n,"rightToc",(function(){return l})),a.d(n,"default",(function(){return c}));var t=a(2),i=a(6),b=(a(0),a(80)),r={id:"maybe",title:"Maybe - A Better Optional",sidebar_label:"Maybe"},o={unversionedId:"types/maybe",id:"types/maybe",isDocsHomePage:!1,title:"Maybe - A Better Optional",description:"Why Maybe",source:"@site/docs/types/maybe.md",slug:"/types/maybe",permalink:"/docs/types/maybe",version:"current",sidebar_label:"Maybe",sidebar:"j8PlusSidebar",previous:{title:"Types",permalink:"/docs/types/"},next:{title:"Either - Turn Your Partial Function into a Total Function",permalink:"/docs/types/either"}},l=[{value:"Why <code>Maybe</code>",id:"why-maybe",children:[]},{value:"Create",id:"create",children:[{value:"<code>Maybe.maybe()</code>",id:"maybemaybe",children:[]},{value:"<code>Maybe.nothing()</code>",id:"maybenothing",children:[]},{value:"<code>Maybe</code> from <code>Optional</code>",id:"maybe-from-optional",children:[]},{value:"<code>Maybe</code> to <code>Optional</code>",id:"maybe-to-optional",children:[]}]},{value:"Transform",id:"transform",children:[{value:"<code>Maybe.map()</code>",id:"maybemap",children:[]},{value:"<code>Maybe.flatMap()</code>",id:"maybeflatmap",children:[]},{value:"<code>Maybe.filter()</code>",id:"maybefilter",children:[]}]},{value:"Get the Value",id:"get-the-value",children:[{value:"<code>Maybe.fold()</code>",id:"maybefold",children:[]},{value:"<code>Maybe.getOrElse()</code>",id:"maybegetorelse",children:[]}]},{value:"Check Maybe Type",id:"check-maybe-type",children:[{value:"<code>Maybe.isJust()</code>",id:"maybeisjust",children:[]},{value:"<code>Maybe.isNothing()</code>",id:"maybeisnothing",children:[]}]}],p={rightToc:l};function c(e){var n=e.components,a=Object(i.a)(e,["components"]);return Object(b.b)("wrapper",Object(t.a)({},p,a,{components:n,mdxType:"MDXLayout"}),Object(b.b)("h2",{id:"why-maybe"},"Why ",Object(b.b)("inlineCode",{parentName:"h2"},"Maybe")),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"Maybe")," is an alternative to Java's ",Object(b.b)("inlineCode",{parentName:"p"},"Optional"),". Java has ",Object(b.b)("inlineCode",{parentName:"p"},"Optional")," then why do we need ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe"),"?"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"First of all, Java's ",Object(b.b)("inlineCode",{parentName:"li"},"Optional")," is not ",Object(b.b)("inlineCode",{parentName:"li"},"Serializable"),". When it was added to Java 8, the designers of the language didn't want us to use it as a type for the object member variables."),Object(b.b)("li",{parentName:"ul"},"Java's ",Object(b.b)("inlineCode",{parentName:"li"},"Optional")," has the ",Object(b.b)("inlineCode",{parentName:"li"},"get()")," method which means it may throw an exception if ",Object(b.b)("inlineCode",{parentName:"li"},"Optional.isPresent()")," is ",Object(b.b)("inlineCode",{parentName:"li"},"false"),".")),Object(b.b)("h2",{id:"create"},"Create"),Object(b.b)("h3",{id:"maybemaybe"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe.maybe()")),Object(b.b)("p",null,"To construct ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe"),", use ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.maybe"),". If the given argument is ",Object(b.b)("inlineCode",{parentName:"p"},"null"),", it creates ",Object(b.b)("inlineCode",{parentName:"p"},"Nothing"),", otherwise it's ",Object(b.b)("inlineCode",{parentName:"p"},"Just")," with the given value."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\nMaybe.maybe(123);\n// Maybe<Integer> = Just(123)\n\nMaybe.maybe(null);\n// Maybe = Nothing\n")),Object(b.b)("h3",{id:"maybenothing"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe.nothing()")),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\nMaybe.nothing();\n// Maybe = Nothing\n")),Object(b.b)("h3",{id:"maybe-from-optional"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe")," from ",Object(b.b)("inlineCode",{parentName:"h3"},"Optional")),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),'import j8plus.types.Maybe;\n\nfinal Optional<String> optionalName = Optional.ofNullable("Kevin");\n// Optional[Kevin]\n\n// ...\nfinal Maybe<String> maybeName = Maybe.fromOptional(optionalName);\n// Maybe<String> = Just(Kevin)\n')),Object(b.b)("h3",{id:"maybe-to-optional"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe")," to ",Object(b.b)("inlineCode",{parentName:"h3"},"Optional")),Object(b.b)("p",null,"If you need to convert ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe")," into ",Object(b.b)("inlineCode",{parentName:"p"},"Optional"),", you can do it with ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.toOptional()"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\nMaybe.maybe(1).toOptional(); // Optional[1]\nMaybe.nothing().toOptional(); // Optional.empty\n")),Object(b.b)("h2",{id:"transform"},"Transform"),Object(b.b)("h3",{id:"maybemap"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe.map()")),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\nMaybe.maybe(1).map(n -> n * 2); // Maybe<Integer> = Just(2)\n")),Object(b.b)("h3",{id:"maybeflatmap"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe.flatMap()")),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\npublic Maybe<User> findUser(final Long id) \n\n// ...\n\nfinal Maybe<User> maybeUser = findUser(1L);\n// Maybe<User> = Just(User(1L, Kevin, Maybe<String> = Just(kevin@blah.blah)))\nmaybeUser.flatMap(user -> user.getEmail()); // Maybe<String> = Just(kevin@blah.blah)\n\nfinal Maybe<User> maybeUser2 = findUser(2L);\n// Maybe<User> = Just(User(2L, John, Maybe = Nothing))\nmaybeUser2.flatMap(user -> user.getEmail()); // Maybe = Nothing\n")),Object(b.b)("h3",{id:"maybefilter"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe.filter()")),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"Maybe.filter()")," can check if the value in ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Just")," matches the given ",Object(b.b)("inlineCode",{parentName:"p"},"Predicate")," and if so, it keeps ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Just")," as is. If not, it turns it into ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Nothing"),".\nIf the ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe")," is already ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Nothing"),", nothing happens, and it is still ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Nothing"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\nMaybe.maybe(10).filter(n -> n > 9);\n// Maybe<Integer> = Just(10)\n\nMaybe.maybe(8).filter(n -> n > 9);\n// Maybe = Nothing\n")),Object(b.b)("h2",{id:"get-the-value"},"Get the Value"),Object(b.b)("h3",{id:"maybefold"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe.fold()")),Object(b.b)("p",null,"So if ",Object(b.b)("inlineCode",{parentName:"p"},"Optional.get()")," is dangerous because it throws ",Object(b.b)("inlineCode",{parentName:"p"},"NoSuchElementException")," when ",Object(b.b)("inlineCode",{parentName:"p"},"Optional")," has a ",Object(b.b)("inlineCode",{parentName:"p"},"null")," value (i.e. ",Object(b.b)("inlineCode",{parentName:"p"},"Optional.empty()"),"), what should I use?"),Object(b.b)("p",null,"A better way is using ",Object(b.b)("inlineCode",{parentName:"p"},"fold")," which is also called as 'Catemorphism' in functional programming."),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"Maybe.fold()")," takes two parameters. The first one is a ",Object(b.b)("inlineCode",{parentName:"p"},"Supplier")," to get the alternative value when ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe")," is ",Object(b.b)("inlineCode",{parentName:"p"},"Nothing"),". The other one is a ",Object(b.b)("inlineCode",{parentName:"p"},"Function")," to handle the value when it is ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Just"),"."),Object(b.b)("p",null,"e.g.)"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\nMaybe.maybe(10)\n  .fold(\n    // Nothing case: When it's Nothing, returns 0.\n    () -> 0,\n    // Just case: When it's Just, return the value after applying this function.\n    n -> n * 5\n  ); // 50\n")),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),'import j8plus.types.Maybe;\n\nMaybe.maybe(1).fold(() -> 0, n -> n * 2); // 2\nMaybe.nothing().fold(() -> 0, n -> n * 2); // 0\n\nMaybe.maybe("Kevin").fold(() -> "", name -> "Hello " + name);\n// "Hello Kevin"\n\nMaybe.nothing().fold(() -> "", name -> "Hello " + name);\n// ""\n')),Object(b.b)("p",null,"When it is ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Just"),", if you don't want to change the value but just want to get it, you can use ",Object(b.b)("inlineCode",{parentName:"p"},"Function.identity()")," for the ",Object(b.b)("inlineCode",{parentName:"p"},"Just")," case function."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import java.util.function.Function;\nimport j8plus.types.Maybe;\n\nMaybe.maybe(123).fold(() -> 0, Function.identity()); // 123\nMaybe.nothing().fold(() -> 0, Function.identity()); // 0\n\n")),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"Maybe.fold()")," is the same as ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.map().getOrElse()"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\nMaybe.maybe(1).fold(() -> 0, n -> n * 2); // 2\nMaybe.maybe(1).map(n -> n * 2).getOrElse(() -> 0); // 2\n\nMaybe.nothing().fold(() -> 0, n -> n * 2); // 0\nMaybe.nothing().map(n -> n * 2).getOrElse(() -> 0); // 0\n")),Object(b.b)("h3",{id:"maybegetorelse"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe.getOrElse()")),Object(b.b)("p",null,"If you don't need to change the value in the ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe")," and just want to get it, you can use ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.getOrElse()"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\nMaybe.maybe(1).getOrElse(() -> 0); // 1\nMaybe.nothing().getOrElse(() -> 0); // 0\n")),Object(b.b)("h2",{id:"check-maybe-type"},"Check Maybe Type"),Object(b.b)("h3",{id:"maybeisjust"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe.isJust()")),Object(b.b)("p",null,"To check if a ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe")," instance is ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Just"),", use ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.isJust()"),". If ",Object(b.b)("inlineCode",{parentName:"p"},"true"),", it is ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Just"),". If ",Object(b.b)("inlineCode",{parentName:"p"},"false"),", it is ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Nothing"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\nMaybe.maybe(1).isJust(); // true\nMaybe.nothing().isJust(); // false\n")),Object(b.b)("h3",{id:"maybeisnothing"},Object(b.b)("inlineCode",{parentName:"h3"},"Maybe.isNothing()")),Object(b.b)("p",null,"To check if a ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe")," instance is ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Nothing"),", use ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.isNothing()"),". If ",Object(b.b)("inlineCode",{parentName:"p"},"true"),", it is ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Nothing"),". If ",Object(b.b)("inlineCode",{parentName:"p"},"false"),", it is ",Object(b.b)("inlineCode",{parentName:"p"},"Maybe.Just"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"import j8plus.types.Maybe;\n\nMaybe.nothing().isNothing(); // true\nMaybe.maybe(1).isNothing(); // false\n")))}c.isMDXComponent=!0},80:function(e,n,a){"use strict";a.d(n,"a",(function(){return s})),a.d(n,"b",(function(){return d}));var t=a(0),i=a.n(t);function b(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){b(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},b=Object.keys(e);for(t=0;t<b.length;t++)a=b[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(t=0;t<b.length;t++)a=b[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=i.a.createContext({}),c=function(e){var n=i.a.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},s=function(e){var n=c(e.components);return i.a.createElement(p.Provider,{value:n},e.children)},y={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,b=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=c(a),m=t,d=s["".concat(r,".").concat(m)]||s[m]||y[m]||b;return a?i.a.createElement(d,o(o({ref:n},p),{},{components:a})):i.a.createElement(d,o({ref:n},p))}));function d(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var b=a.length,r=new Array(b);r[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:t,r[1]=o;for(var p=2;p<b;p++)r[p]=a[p];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);